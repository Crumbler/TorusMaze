#version 330 core
layout (lines) in;
layout (triangle_strip, max_vertices = 4) out;

in float isWallParamPr[];

out float isWallParam;

uniform float time;
uniform float innerR;
uniform float outerR;
uniform mat4 transMat;
uniform mat4 projMat;
uniform mat4 viewMat;

mat3 rotateY(float angle)
{
    float s = sin(angle);
    float c = cos(angle);

    return mat3(c,    0.0f, -s,
                0.0f, 1.0f, 0.0f,
                s,    0.0f, c);
}


void emitTorusVertex(in float baseAngle, in float endAngle)
{
    const float rOffset = 0.001f;
    vec3 base = vec3(innerR * sin(baseAngle), 0.0f, innerR * cos(baseAngle)),
         end = vec3(0.0f, (outerR + rOffset) * sin(endAngle), (outerR + rOffset) * cos(endAngle));

    end = rotateY(baseAngle) * end;

    vec3 res = base + end;

    float dY = 0.0 * sin(atan(res.x, res.z) * 4.0 + time * 0.01) * 0.2;

    gl_Position = projMat * viewMat * transMat * vec4(res + vec3(0.0, dY, 0.0), 1.0f);
    EmitVertex();
}


void main() {
    vec4 v1 = gl_in[0].gl_Position,
         v2 = gl_in[1].gl_Position;

    const float eps = 0.001, dHorAngle = 0.005f;
    float dVerAngle = dHorAngle * (innerR / outerR);

    float isHorizontal = step(abs(v1.y - v2.y), eps),
          isVertical = 1.0f - isHorizontal;

    isWallParam = isWallParamPr[0];

    emitTorusVertex(v1.x + isVertical * dHorAngle, v1.y + isHorizontal * dVerAngle);

    emitTorusVertex(v1.x - isVertical * dHorAngle, v1.y - isHorizontal * dVerAngle);

    emitTorusVertex(v2.x + isVertical * dHorAngle, v2.y + isHorizontal * dVerAngle);

    emitTorusVertex(v2.x - isVertical * dHorAngle, v2.y - isHorizontal * dVerAngle);

    EndPrimitive();
}
